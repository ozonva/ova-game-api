version: '3.7'

services:

  gocli:
    build:
      context: ./
      dockerfile: docker/golang-cli/Dockerfile
    volumes:
      - ./:/app

  goapp:
    build:
      context: ./
      dockerfile: docker/golang/Dockerfile
    command: go run cmd/ova-template-api/main.go
    restart: unless-stopped
    depends_on:
      - db
      - kafka
      - jaeger
    links:
      - db
      - kafka
    ports:
      - "127.0.0.1:${GRPC_PORT}:${GRPC_PORT}"
      - "127.0.0.1:${PROMETHEUS_PORT}:${PROMETHEUS_PORT}"
    volumes:
      - ./:/app

  golint:
    build:
      context: ./docker/golang-lint
      dockerfile: Dockerfile
    volumes:
      - ./:/app

  gomock:
    build:
      context: ./
      dockerfile: docker/golang-mockgen/Dockerfile
    volumes:
      - ./:/app

  db:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "127.0.0.1:${DB_PORT}:5432"

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080

  zookeeper:
    image: bitnami/zookeeper:latest
    ports:
      - 2181:2181
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - "zookeeper_data:/bitnami"

  kafka:
    image: bitnami/kafka:latest
    ports:
      - ${KAFKA_PORT}:9092
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_LISTENERS=PLAINTEXT://:${KAFKA_PORT}
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://${KAFKA_HOST}:${KAFKA_PORT}
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    volumes:
      - "kafka_data:/bitnami"

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - '6831:6831/udp'
      - '16686:16686'

  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    depends_on:
      - goapp
    volumes:
      - "./prometheus.yml:/etc/prometheus/prometheus.yml"
    ports:
      - "9090:9090"

networks:
  default:

volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
